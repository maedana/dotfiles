*usr_45.txt*	For Vim バージョン 6.3.  Last change: 2002 Oct 08

		     VIM USER MANUAL - by Bram Moolenaar

				  言語を選ぶ


vimでは各種のメッセージをいくつかの言語で表示することができます。この章では
表示に使用する言語を切り換える方法を説明します。また、様々な言語のファイルを
扱う時の違いについても説明します。

|45.1|	メッセージ用の言語
|45.2|	メニュー用の言語
|45.3|	他のエンコード方法の利用
|45.4|	違ったエンコードを用いてのファイル編集
|45.5|	各国語の文字入力

     Next chapter: |usr_90.txt|  vimのインストール
 Previous chapter: |usr_44.txt|  文法定義の自作
Table of contents: |usr_toc.txt|

==============================================================================
*45.1*	メッセージ用の言語

vimは起動時に環境をチェックし、あなたの利用している言語が何かを調べます。ま
ず間違いなくこの機能は正しく動いて、お使いの言語でのメッセージ(のセットが存
在すれば)を表示します。現在の言語が何かを見るには、このコマンドを使います。
>
	:language

もし結果が"C"であれば、デフォルトとなっていることを示します。この場合は言語
は英語となります。

	Note:
	異なった言語の扱いは、それを処理できるようにコンパイルした時にだけ使
	えます。その機能の有無は":version"コマンドを実行し、出力に"+gettext"
	と"+multi_lang"があるかどうかを調べます。両方があれば、問題なしです。
	どちらかが"-gettext"とか"-multi_lang"となっている場合はそのvimでは残
	念ながら使えません。

違った言語でメッセージを表示させたい場合はどうすればよいのでしょうか？これに
はいくつかの方法があります。どれを使うべきかはお使いのシステムの能力に依存し
ます。
最初の方法は、vimを起動する前に環境変数に希望の言語を設定しておく方法です。
例えばUnixではこのようにします。 >

	env LANG=de_DE.ISO_8859-1  vim

この方法はお使いのシステムが言語サポートをしている場合にのみ使えます。この方
法の利点はライブラリに入っているGUIのメッセージも含めて全てが正しい言語を使
って表示されることです。逆に欠点はvimの起動前に環境変数の設定をしなければな
らない点です。vimを起動後に言語を変更するのであれば、２つ目の方法が使えます。
>

	:language fr_FR.ISO_8859-1

この方法では言語をいくつかの名前で試してみることができます。お使いのシステム
でサポートしていない名前を指定するとエラーメッセージが出ます。翻訳されたメッ
セージが使えない場合にはエラーは表示しません。vimは何も言わずに言語として英
語を使います。
お使いのシステムでサポートされている言語を調べるには、その一覧が入っている
ディレクトリを探します。(以下の記述はUnix環境の方用です。windowsやMacOS環境
の方は無視してください)私の環境では"/usr/share/locale"です。一部のシステムで
は、"/usr/lib/locale"になっています。"setlocale"のマニュアルページを調べると
そのような一覧がどこにあるかのヒントが掲っているでしょう。
言語名は、そこにある通りに正確に入力するように気をつけてください。大文字／小
文字、"-"と"_"、といった点には特に気をつけます。

メッセージ、編集するテキスト、時刻形式のそれぞれに言語を指定することができま
す。|:language|をご覧ください。


あなた自身でのメッセージ翻訳
----------------------------

お使いの言語用の翻訳メッセージが用意されていない場合、あなた自身で作成できま
す。まず、vimのソースコードとＧＮＵのgettextパッケージを入手します。ソースを
展開すると、"src/po/"ディレクトリに手順書である"README.txt"があります。
翻訳すること自体はそれほど難しくはありません。何もプログラマでなくても大丈夫
です。でも当然ですが、英語と翻訳したい言語の両方を解っていることは必要です。
翻訳結果が満足できるものであれば、それを他の人々に提供することを考えてくださ
い。vim-online(http://vim.sf.net)にアップロードするか、vimのメンテナンス担当
にメールするか、(その両方でも)してください。

==============================================================================
*45.2*	メニュー用の言語

デフォルトのメニューは英語です。他の言語でも使えるようにするには、これを翻訳
しなければなりません。メッセージの場合と同様に、これも環境変数に定義をしてあ
れば、自動的にその言語を使います。そのためには何もする必要はありません。ただ
しこれが使えるのは、その言語用の翻訳結果がある場合に限ります。

例えばドイツ人で言語はドイツ語を使いたいが、"Datei"よりもメニューは"File"の
方がよいという場合を考えましょう。メニューを英語に戻すにはこのようにします。
>
	:set langmenu=none

同じように言語を指定することもできます。 >

	:set langmenu=nl_NL.ISO_8859-1

メッセージと同様に、"-"と"_"は違った文字です。ですが、ここでは大文字と小文字
の違いは無視します。
'langmenu'オプションの定義はメニューをロードする前ん行わなければなりません。
一度メニューを定義してしまうと、'langmenu'を変更しても何も起こりません。です
から、ユーザ用vimrcファイルに'langmenu'を設定するコマンドを書いておきます。
vimを起動してからどうしてもメニューの言語を変更したいのであれば、次の手順で
行うことができます。 >

	:source $VIMRUNTIME/delmenu.vim
	:set langmenu=de_DE.ISO_8859-1
	:source $VIMRUNTIME/menu.vim

これには１つだけ問題があります。上の手順では独自に作成したメニューが全てなく
なってしまいます。ですからこれを再定義する必要があります。


あなた自身でのメニュー翻訳
--------------------------

どんな翻訳結果があるかを知るには次のディレクトリを見ます。

	$VIMRUNTIME/lang ~

翻訳結果のファイル名はmenu_{language}.vimの形式です。この中に必要な言語がな
い場合、自身で翻訳することもできます。これを行う一番簡単な方法は既存の言語用
ファイルをコピーして、それに変更を加えていく方法です。まずお使いの言語名を
":language"コマンドで見つけてください。その名前を（ただし全部小文字にして）
使います。次にそのファイルが'runtimepath'で早く見つかるように、ユーザ用の
ランタイムディレクトリにコピーします。例えば、Unixであれば、こうします。 >

	:!cp $VIMRUNTIME/lang/menu_ko_kr.euckr.vim ~/.vim/lang/menu_nl_be.iso_8859-1.vim

"$VIMRUNTIME/lang/README.txt"には翻訳のヒントとなることが載っています。一度
ご覧ください。

==============================================================================
*45.3*	他のエンコード方法の利用

vimは編集しようとしているファイルがお使いの言語を使っているものとみなしま
す。多くのヨーロッパ系言語は"Latin1"となります。この場合、１バイトが１文字を
示しますので、最大２５６文字が表示できます。ですがアジア系言語ではこれでは不
十分です。多くの場合は２バイトエンコードを用いて、１万文字を超す文字を提供し
ています。それでも、複数の言語を混在させるには不十分なのです。だからUnicode
が出てきたのです。Unicodeでは一般的に使われているほとんどの言語を網羅してい
ます。これは"全てを置き換えるスーパーエンコード"なのです。ですがまだ、広く普
及しているとは言えない状態です。
幸い、vimはこの３種類のエンコード方法を全てサポートしています。また多少の制
限はありますが、ファイルとは違う言語を使っている環境でもこれを利用できます。
とはいうものの、お使いの言語で書かれたファイルだけを使っている時には、デフォ
ルトのままで何もしなくてもうまく動くはずです。以下は、違った言語での編集を行
う時にだけ意味があります。

	Note:
	違ったエンコード方法が使えるのはvimがそれを扱えるようにコンパイルし
	た時だけです。うまく動くかどうかを調べるには":version"コマンドを実行
	し、"+multi_byte"という出力があるかどうかを見ます。これがあればＯＫ
	です。もし"-multi_byte"となっていれば、残念ながらそのvimでは、この機
	能は使えません。


ＧＵＩでUnicodeを使う
---------------------

Unicodeには他のエンコードから変換したり他に戻したりしても情報が欠落しないと
いう長所があります。内部でUnicodeを使うようにvimをmakeすると、あらゆるエン
コードのファイルを編集することができます。
残念ながら、まだUnicodeをサポートしているシステムはまだ限られています。です
から、お使いの言語がUnicodeを使っていることはまずありません。それを使いたいと
vimに教えてやり、他のシステムとインタフェースの取り方を教えてやる必要がありま
す。
ＧＵＩ版のvimをUnicode文字を表示できるように起動してみましょう。このように行
います。 >

	:set encoding=utf-8
	:set guifont=-misc-fixed-medium-r-normal--18-120-100-100-c-90-iso10646-1

'encoding'オプションで、vimに使いたい文字のエンコード方法を教えます。これは
バッファ(編集中のファイル)の文、レジスタ、vimスクリプトなどに適用されます。
ですから、'encoding'の内容はvimの内部設定とみなすことができます。
上の例は、お使いのシステムに必要なフォントがあるという前提に立っています。
上の例で使っている名前はX-Windowのものです。このフォントはUnicodeをサポート
した拡張xtermで使うパッケージに入っています。このフォントをお持ちでなければ
こちらで見つけられます。

	http://www.cl.cam.ac.uk/~mgk25/download/ucs-fonts.tar.gz ~

MS-Windowsでは、一部のフォントにはUnicode文字の部分が入っています。フォント
の"Courier New"を使ってみてください。これは"編集(E)/フォント選択(N)..."メ
ニューを使って、利用可能なフォントを試してください。等幅(非プロポーショナル)
フォントだけが使えます。例を示します。 >

	:set guifont=courier_new:h12

これがうまく動かなければ、フォントパックを入手してください。Microsoftが場所
を変更していなければ、こちらにあります。

	http://www.microsoft.com/typography/fontpack/default.htm ~

次にvimに内部でUnicodeを使い、その表示にUnicodeフォントを使うように指定しま
す。入力した文字列は元の言語のエンコードのままです。これをUnicodeに変換する
必要があります。どの言語から変換するかを'termencoding'オプションで指定しま
す。これは次の手順でできます。 >

	:let &termencoding = &encoding
	:set encoding=utf-8

これは'encoding'の古い値を'termencoding'に設定してから、'encoding'を"utf-8"
に設定しています。あなたの環境で本当に動くかは試してみなければなりません。
これは特にアジア系の言語でインプットメソッドを使っていて、Unicodeを使いたい
場合には確認を行うべきです。


Unicode端末でUnicodeを使う
--------------------------

端末によっては直接Unicodeを扱えるものもあります。XFree86についてくる標準の
xtermもそういったもののひとつです。ここではこれを例として使います。
まず何よりも、Unicodeサポート付きでコンパイルされたxtermでなくてはなりませ
ん。その確認方法や必要に応じたコンパイル手順については、|UTF8-xterm|をご覧く
ださい。
ではxtermを"-u8"パラメタ付きで起動しましょう。併せてフォントを指定する必要が
あるかもしれません。例を示します。 >

   xterm -u8 -fn -misc-fixed-medium-r-normal--18-120-100-100-c-90-iso10646-1

これでこの端末でvimを使うことができます。上での例のように'encoding'を"utf-8"
にします。これでＯＫです。


普通の端末でのUnicodeの利用
---------------------------

Unicodeのファイルを扱いたいけれど、Unicodeをサポートした端末がないという場合
はどうでしょう？。vimなら、端末がサポートしていなくて表示できないような文字
でも扱うことができます。文章のレイアウトは保護されます。 >

	:let &termencoding = &encoding
	:set encoding=utf-8

これはＧＵＩ版で用いたコマンドと全く同じです。ただし動きは異なります。vimは
表示すべき文字列を端末に送り込む前に変換します。これは端末におかしな文字が表
示されてメチャクチャになるのを防ぎます。
このためには、'termencoding'と'encoding'間の変換が正しく動くことが必須です。
Latin1からUnicodeへの変換は常に正しく動きます。ですが、これ以外の変換を行う
には、|+iconv|機能が必要となります。
Unicode文字を含むようなファイルを編集してみてください。vimはその端末で表示で
きない文字があるべき場所に、疑問符(やアンダスコアなどの文字)を表示します。
カーソルを疑問符の上に動かし、このコマンドを実行します。 >

	ga

vimはその文字の文字コード情報を１行表示します。これはその文字が何かを知る手
がかりとなるでしょう。この文字コードをUnicodeの表を使って調べることが可能で
す。実際にその方法で膨大な時間の手作業を行えば、ファイルを閲覧することができ
ます。

	Note:
	'encoding'はvim内の全文章で使いますから、これを変更すると全ての非ア
	スキー文字は無効となります。特にレジスタを使う場合と'viminfo'オプ
	ションを使う場合(例えば検索パターンを復元する場合など)には気を付けて
	ください。ですから、'encoding'はユーザvimrcファイルで設定し、それ以
	外では変更しないことを推奨します。

==============================================================================
*45.4*	違ったエンコードを用いてのファイル編集

Unicodeを使うようにvimを設定して、16-bitのUnicodeファイルを編集したいとしま
す。簡単そうですよね、本当でしょうか？vimは内部ではutf-8を使っていますから、
16-bitエンコードされた情報は変換が必要なのです。つまり、文字セット(Unicode)
とエンコード方法(utf-8や16-bit)の間には違いがあるのです。
vimは編集しようとしているファイルの種類が何かを検出しようとします。これには
'fileencodings'オプションで指定されたエンコード名を使います。Unicodeを使うの
であれば、デフォルト値は"ucs-bom,utf-8,latin1"です。つまりvimはそのファイル
がここに指定してあるエンコード方法のどれなのかをチェックするのです。

	ucs-bom		ファイルは必ずバイトオーダマーク(BOM)で初まらなくて
			はなりません。これはUnicodeのうち、16-bit, 32-bit,
			utf-8のエンコードを検出できます。
	utf-8		utf-8のUnicodeです。これはバイトシーケンスがutf-8で
			あり得ないパターンが出てくると拒否します。
	latin1		古き良き時代の８ビットエンコード。常に有効です。

16-bitのUnicodeのファイルを編集しようとする時、BOMが正しければ、vimはこれを
検出して、ファイルを読み込む時にutf-8に変換しながら読み込みます。'fileencoding'
オプション(最後に"s"がない方)には検出したエンコード方法を設定します。この場
合は"ucs-2le"というものです。これは２バイト系でリトルエンディアンに設定され
たUnicodeです。このファイル形式はMS-Windowsでは普通のものです。（例えばレジ
ストリファイルがそうです)
ファイルを書き出す時は、vimは'fileencoding'と'encoding'を比べます。内容に違
いがあれば、文字列を変換します。
'fileencoding'文字列が空の場合は、一切の変換を行いません。つまり、文字列は
'encoding'を使ってエンコードすべきだとみなされます。

デフォルトの'fileencodings'が良くないのであれば、チェックさせたいエンコード
を設定します。エンコード方法が間違っている場合はスキップします。"latin1"を最
初に指定するとうまく動かなくなります。これはどんな文書も"latin1"には合致して
いると判断してしまうためです。次の例はBOMがなくてutf-8でもない場合にはシフト
ＪＩＳと判断します。 >

	:set fileencodings=ucs-bom,utf-8,sjis

エンコード方法の推奨値については|encoding-values|をご覧ください。他の値でも
同じように動くでしょう。これは使える変換に依存します。


強制的なエンコード
------------------

自動検出がうまく動かない場合、どのエンコード方法を使うか指定しなければなりま
せん。例えばこのようにします。 >

	:edit ++enc=koi8-r russian.txt

"++enc"を使って、このファイルでのみ用いるエンコード名を指定します。vimは指定
のエンコード方法で(この場合ならキリル文字)ファイルを変換し、'encoding'にもそ
れを反映します。'fileencoding'にも指定のエンコード方法が設定されるため、ファ
イルを保存する時の逆変換も正しく行えます。
同じパラメタをファイル保存時にも使えます。この方法であれば、vimをコード変換
ソフトとして利用することができます。例えばこのようにします。 >

	:write ++enc=utf-8 russian.txt
<
	Note:
	変換の結果、一部の文字が欠落する場合があります。任意のエンコードから
	Unicodeへの変換とその逆変換については、間違った文字を使っていない限
	り、問題はほとんど出ません。しかし、Unicodeのファイルを他のエンコー
	ドに変換した場合、元ファイルで複数の言語を用いていた場合、簡単に情報
	の欠落が生じます。

==============================================================================
*45.5*	各国語の文字入力

コンピュータのキーボードにはせいぜい100個程度のキーしかありません。一部の言
語には数千の文字がありますし、Unicodeに至っては１万文字を超えています。これだ
けの文字をどのようにして入力するのでしょう？
まず、膨大な量の特殊文字を使うのでなければ、ダイグラフ(二重字)で何とかなるで
しょう。これについては|24.9|で説明した通りです。
次にキーボードでの文字よりはるかに大量の文字を用いるような言語を使う場合は、
インプットメソッド(IM)を使うことになるでしょう。これを使うには、キーボードか
ら入力したキーを目的の文字に変換する手順を覚える必要があります。あなたがＩＭ
を必要とするのであれば、おそらくお使いのシステムには組み込まれていることで
しょう。vimでも他のプログラムと同様にＩＭが使えます。詳しくは、X-Windowに関
しては|mbyte-XIM|を、MS-Windowsに関しては|mbyte-IME|をご覧ください。


キーマップ
----------

一部の言語では、文字セットがラテン語とは違っていても同じような文字数のものが
あります。こういった場合は、キーと文字をマッピングすることができます。vimに
はキーマップというのがあります。
例えば、ヘブライ語を使いたい場合であれば、こうしてキーマップを読み込みます。
>
	:set keymap=hebrew

vimはキーマップファイルを探そうとします。これは'encoding'の内容に依ります。
目的のファイルが見つけられない場合は、エラーメッセージを表示します。

うまく読み込みができれば、挿入モードでヘブライ語を入力できます。挿入モードで
":"コマンドを入力すると、自動的に英語に切り換わります。ヘブライ語と英語の切
り換えはこのコマンドで行います。 >

	CTRL-^

これは挿入モードとコマンド行モードでのみ動作します。通常モードでは、全く別の
こと(別ファイルへのジャンプ)を実行します。
キーマップを使っている場合、'showmode'オプションを設定しておくと、モードメッ
セージとしてそれを表示します。ＧＵＩ版ではカーソルの色を変えることでキーマッ
プを使用中であることを示します。
また、'iminsert'と'imsearch'オプションを使ってキーマップの状態を変更すること
ができます。

マップの一覧を見るにはこうします。 >

	:lmap

利用できるキーマップファイルを調べるには、ＧＵＩ版であれば、「編集(E)/キー
マップ(K)」メニューを使います。ＧＵＩ版でなければ、このコマンドを使います。
>
	:echo globpath(&rtp, "keymap/*.vim")


あなた自身でのキーマップ作成
----------------------------

自作のキーマップファイルを作成することができます。そんなに難しいことではあり
ません。使いたいと思っている言語に似たキーマップファイルを使って始めましょ
う。そのファイルを自分用のランタイムディレクトリの"keymap"ディレクトリにコ
ピーしましょう。例えば、Unix環境なら、"~/.vim/keymap"ディレクトリを使えば良
いでしょう。
キーマップファイルの名前は次のルールに従っていなければなりません。

	keymap/{name}.vim ~
もしくは
	keymap/{name}_{encoding}.vim ~

{name}はキーマップの名前です。わかりやすい名前を選びましょう。ですが、既存の
キーマップとは違う名前にしてください。(既存のファイルを置き換えたい場合は別
ですが) 名前にはアンダースコア(_)は使えません。また使用するエンコード方法を
オプションとして追加できます。次のように使います。

	keymap/hebrew.vim ~
	keymap/hebrew_utf-8.vim ~

このファイルの内容については説明は不要でしょう。vimの配布物にあるキーマップ
をいくつか覗いてください。詳しくは|mbyte-keymap|をご覧ください。


最後の手段
----------

どの方法もダメだった場合でも、CTRL-Vを使えば、どんな文字でも入力することがで
きます。

	エンコード 入力方法		入力できる範囲 ~
	8ビット	   CTRL-V 123		10進数の 0～255
	8ビット	   CTRL-V x a1		16進数の 00～ff
	16ビット   CTRL-V u 013b	16進数の 0000～ffff
	31ビット   CTRL-V U 001303a4	16進数の 00000000～7fffffff

空白記号は入力しないでください。詳しくは|i_CTRL-V_digit| をご覧ください。


==============================================================================

Next chapter: |usr_90.txt|  vimのインストール

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
