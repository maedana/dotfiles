*usr_44.txt*	For Vim バージョン 7.1.  Last change: 2006 Apr 24

		     VIM USER MANUAL - by Bram Moolenaar

			    文法定義の自作


vimでは200ものファイルタイプに対応した文法定義を用意しています。もし編集しよ
うとしているファイル用の定義が見つからない場合は本章を読んで、そのタイプの
ファイルをハイライト表示とする方法を理解してください。リファレンスマニュアル
の|:syn-define|も併せてご覧ください。

|44.1|	基本的な文法(syntax)コマンド
|44.2|	キーワード
|44.3|	照合(matching)
|44.4|	範囲
|44.5|	多重化(入れ子になった)項目
|44.6|	グループ指定?(Following groups)
|44.7|	その他のパラメタ
|44.8|	クラスタ
|44.9|	他の文法定義ファイルを取り込む
|44.10|	同期
|44.11|	文法のインストール
|44.12|	可搬性の高い文法の配置

     Next chapter: |usr_45.txt|  言語を選ぶ
 Previous chapter: |usr_43.txt|  ファイルタイプを使う
Table of contents: |usr_toc.txt|

==============================================================================
*44.1*	基本的な文法(syntax)コマンド

既存の文法ファイルを使えば、多くの時間を節約することができます。ですからまず
$VIMRUNTIME/syntaxディレクトリに目的の言語に似た文法ファイルファイルがないか
探してください。ここにあるファイルを見れば、文法ファイルの基本的なレイアウト
も解るでしょう。内容を理解するには以下を読破してください。

基本的なパラメタから始めましょう。新しい文法定義をする前に現状の全ての定義を
クリアする必要があります。 >

	:syntax clear

これは最終的な文法ファイルでは不要ですが、いろいろ試す時には、とても便利な方
法です。

この章の説明はできるだけ単純化しています。他の人に使ってもらうような文法定義
を書くのであれば、詳細を理解できるまで全てを最後まで読んでください。


定義済の項目の一覧
------------------

現在定義されている文法項目を確認するにはこのコマンドを使います。 >

	:syntax

これは実際にどの項目が定義されているかを確認する時に使います。新しい文法ファ
イルを作っている時には極めて重宝します。また各項目で使っている色も表示します
ので、それが希望通りかどうかを調べる時の助けとなります。
ある特定の文法グループで使っている項目のリストを出すにはこうします。 >

	:syntax list {group-name}

これはリストクラスタ(|44.8|で説明します)でも使うことができます。その場合は名
前に"@"を含めます。


MATCHING CASE
大文字小文字の識別
------------------

例えばPascalのように大文字/小文字を区別しない言語があります。また逆にＣのよ
うに区別する言語もあります。その言語のタイプによって次のいずれかを指定する必
要があります。 >
	:syntax case match	(大文字/小文字を区別する)
	:syntax case ignore	(大文字/小文字を区別しない)

"match"パラメタでは文法の各要素の大文字/小文字を区別します。ですから、"int"
と"Int"や"INT"は違ったものです。逆に"ignore"を使った場合は、"Procedure"と
"PROCEDURE"と"procedure"は同じものとして扱います。
":syntax case"コマンドは文法ファイルのどこに現れても構いません。現わ
れた以降の文法定義がその対象となります。ほとんどの場合は、":syntax case"コ
マンドは文法ファイルの１個所だけで定義します。ですが、大文字/小文字を識別す
る部分と識別しない部分を持つような特殊な言語の場合は":syntax case"コマンドを
ファイルのあちこちにばらまくこともできるのです。

==============================================================================
*44.2*	キーワード

文法定義で最も基本的な要素はキーワードです。キーワードの定義は次のような形で
行います。 >

	:syntax keyword {group} {keyword} ...

{group}は文法グループの名前です。":highlight"コマンドを使えば、{group}の色を
指定できます。{keyword}パラメタは実際のキーワード文字列です。いくつか例を示し
ましょう。 >

	:syntax keyword xType int long char
	:syntax keyword xStatement if then else endif

この例ではグループ名に"xType"と"xStatement"を使っています。解り易くするため
に、各グループ名の先頭には定義しようとしている言語のファイルタイプを付けま
す。この例ではＸ言語(面白い名前というのではなく例題(eXample)用言語)の文法定
義という意味です。ですから"csh"スクリプト用の文法ファイルは"cshType"といった
名前になるでしょう。つまり'filetype'の値と同じものを先頭に付けるのです。
この例題コマンドでは、"int","long","char"をある方法でハイライト表示し、"if"
"then","else","endif" は別の方法でハイライト表示します。
次にこの"x"グループ名をvimの標準名と関連付ける必要があります。これには次のコ
マンドを使います。 >

	:highlight link xType Type
	:highlight link xStatement Statement

これは"xType"の時に"Type"でハイライト表示し、"xStatement"の時に"Statement"で
ハイライト表示することを示します。"Type"や"Statement"はvimの標準名です。詳し
くは|group-name|をご覧ください。


特殊なキーワード
----------------

キーワードで用いう文字は'iskeyword'オプションで指定しなければなりません。そ
れ以外の文字を使っても、決して単語に合致することはありません。vimはこの点の
警告を行いません。
例題のＸ言語では'-'の文字をキーワードとして使います。このようにして行います。
>
	:setlocal iskeyword+=-
	:syntax keyword xStatement when-not

":setlocal"コマンドはカレントバッファの'iskeyword'だけを変更します。なお、こ
れを使うと、"w"や"*"のようなコマンドの動作も変わってしまいます。こうなるのが
嫌ならば、キーワードを定義せずに照合(次の節で説明します)を使います。

Ｘ言語では短縮形が使えます。例えば、"next"は"n"や"ne"や"nex"に省略できます。
このコマンドを使ってそれを定義できます。
>
	:syntax keyword xStatement n[ext]

キーワードは常に単語全体に合致するので、"nextone"には合致しません。

==============================================================================
*44.3*	照合(match)

もう少し複雑なものを定義してみましょう。普通の識別子に合致するようにしたいと
します。これを行うには文法項目の照合を定義します。次の例は全て小文字だけの単
語に合致します。 >

	:syntax match xIdentifier /\<\l\+\>/
<
	Note:
	キーワードは他の文法項目より優先されます。つまり、"if"や"then"といっ
	たキーワード(上で述べた":syntax keyword"コマンドで定義したもの)は例
	えxIdentifierのパターンにも合致していても、キーワードとして扱います。

最後の部分は検索用と同じようなパターンです。パターンの前後には"/"と"/"で囲み
ます(":substitute"コマンドと同じやり方です)。他の文字、例えば"+"や"'"を使っ
ても構いません。

ではコメント用の照合を定義してみましょう。Ｘ言語では"#"の文字から行末までが
全てコメントとなります。 >

	:syntax match xComment /#.*/

検索パターンは全て使えるので、照合を使えばすごく複雑なものでもハイライト表示
にできます。検索パターンについては|pattern|をご覧ください。

==============================================================================
*44.4*	範囲

このＸ言語では、ダブルクオート(")で囲った部分が文字列となります。
文字列をハイライト表示するには範囲を定義します。範囲には開始(ダブルクオート)
と終了(これもダブルクオート)が必要です。その定義はこのようになります。 >

	:syntax region xString start=/"/ end=/"/

"start"指令と"end"指令で、範囲の開始位置と終了位置を探すためのパターンを定義
します。でも次のような文字列があったらどうなるでしょう？

	"A string with a double quote (\") in it" ~

これは問題となります。文字列の途中にあるダブルクオートが文字列の終了位置に
なってしまいます。文字列中にあるダブルクオートをスキップするように指定する必
要があります。これには"skip"指令を使います。 >

	:syntax region xString start=/"/ skip=/\\"/ end=/"/

バックスラッシュを２つ重ねることで１つのバックスラッシュの意味になります。こ
れはバックスラッシュという文字が検索パターンの中でも特殊な文字だからです。

照合と範囲はどう使い分ければよいのでしょうか？大きな違いは照合項目は１つのパ
ターン全体が合致しなければなりません。範囲は"start"のパターンに合致した場所
から始まりますが、"end"のパターンがあるかどうかは関係ありません。つまり、項
目が必ず"end"パターンに合致してほしい場合には範囲は使えません。逆に範囲の方
が定義は簡単です。
また、次の節でも述べるように、多重化(入れ子に)するのも簡単です。

==============================================================================
*44.5*	多重化(入れ子になった)項目

次のようなコマンドがあるとします。

	%Get input  TODO: Skip white space ~

行全体はコメントなので青く表示するのですが、中央の"TODO"はコメントの中でも黄
色く目立つようにしたいとします。これを行うには次のような文法グループを定義し
ます。 >

	:syntax keyword xTodo TODO contained
	:syntax match xComment /%.*/ contains=xTodo

最初の行にある"contained"パラメタは、このキーワードが他の文法項目の中でのみ
有効となることを示します。次の行には"contains=xTodo"があります。これはxTodo
の文法項目がこの項目の中で使われることを示します。この結果、コメント行全体は
"xComment"の条件に合うため青い表示となり、その中にあるTODOという単語はxTodo
の指定に合致するので黄色の表示となります。(このためにxTodo用のハイライトを設
定します)


再帰的な多重化
--------------

Ｘ言語では波カッコ("{"と"}")でコードブロックを定義します。コードブロックの中
にはさらにコードブロックがあっても構いません。この定義は次のようにします。 >

	:syntax region xBlock start=/{/ end=/}/ contains=xBlock

ですから、次のようなコードがあるとすると、

	while i < b { ~
		if a { ~
			b = c; ~
		} ~
	} ~

まず１行目の"{"でxBlockが開始となります。２行目には別の"{"があります。これは
xBlock項目の中にあり、その定義では自分自身を含んでいるため、２つ目のxBlockが
ここから始まります。つまり"b = c;"の行は第２レベルのxBlockの範囲に入ります。
次の行にはパターンの末尾を示す"}"があります。これは２つ目のxBlockを閉じます。
というのは２つ目の範囲には"}"が含まれていますから、最初のxBlockの範囲からは
隠されます。最後の行の"}"は最初のxBlockの範囲を閉じることになります。


行末情報の保持
--------------

次の２つの文法項目を見てみましょう。 >

	:syntax region xComment start=/%/ end=/$/ contained
	:syntax region xPreProc start=/#/ end=/$/ contains=xComment

"%"から行末までを全てコメントと定義します。また、"#"から行末までを全てプリプ
ロセッサ指令(xPreProc)と定義します。プリプロセッサの行にもコメントを置けます
から、プリプロセッサの定義には"contains=xComment"というパラメタを付けてあり
ます。では次のようなコードでは何が起こるのでしょう。

	#define X = Y  % Comment text ~
	int foo = 1; ~

この場合、２行目の内容までがxPreProcとして表示されてしまいます。プリプロセッ
サ指令は行末で終わります。上述のコマンドには"end=/$/"とちゃんと書いてありま
す。じゃあ何が悪いのでしょう？
問題はxCommentの"contained"の部分にあります。コメントは"%"で始まって、行末で
終わります。xCommentが閉じた後もxPreProcの指定は生きています。ですから、行末
の続きを見て次の行もxPreProcの範囲に含んでしまうのです。
内包した文法項目が必要となる行末情報を隠さないようにするには"keepend"パラメ
タを使います。これで、行末を２回チェックできるようになります。 >

	:syntax region xComment start=/%/ end=/$/ contained
	:syntax region xPreProc start=/#/ end=/$/ contains=xComment keepend


CONTAINING MANY ITEMS
多くの項目の内包
----------------

"contains="のパラメタには全項目の指定もできます。例えば、次のようにします。 >

	:syntax region xList start=/\[/ end=/\]/ contains=ALL

上の例では全ての文法項目を含むことができます。これには同じ位置である場合を除
いて自分自身も含みます。(同じ位置を除外するのは無限ループを避けるためです)
一部のグループを除外するような指定もできます。つまり一覧にある項目以外を全部
含むというパターンです。
>
	:syntax region xList start=/\[/ end=/\]/ contains=ALLBUT,xString

"TOP"を指定すると、"contained"パラメタを持たない全項目が対象となります。
"CONTAINED"は逆に"contained"パラメタ付きの項目だけを対象とします。
詳しくは|:syn-contains|をご覧ください。

==============================================================================
*44.6*	グループ指定?(Following groups)

Ｘ言語は次の形式でステートメントを記述します。

	if (condition) then ~

この３つの項目をそれぞれ違った３色でハイライト表示したいとします。ですが、
"(condition)"と"then"は違ったハイライト表示をするべき場所に現れるかもしれま
せん。これには次のようにします。 >

	:syntax match xIf /if/ nextgroup=xIfCondition skipwhite
	:syntax match xIfCondition /([^)]*)/ contained nextgroup=xThen skipwhite
	:syntax match xThen /then/ contained

"nextgroup"パラメタで次にどの項目が来るかを指定します。これは必須ではありませ
ん。指定の項目がどれも見つからなかった場合は何も起こりません。例えば、次の場
合を見てみましょう。

	if not (condition) then ~

"if"はxIfの条件に合致します。ですが、"not"はnextgroupで指定のxIfConditionに
合致していません。結局、"if"だけがハイライト表示となります。

"skipwhite"パラメタを指定すると項目中に空白類(空白文字とTAB)が現れることを示
します。同じようなパラメタに"skipnl"(項目中に改行がある)と"skipempty"(空行が
あってもよい)があります。"skipnl"では空行をスキップしない点にご注意ください。
改行の後には何らかの文字が必要なのです。

==============================================================================
*44.7*	その他のパラメタ

MATCHGROUP
----------

範囲を指定した場合、その全体が指定にしたがった色で表示します。例えばxInside
というグループでカッコ( )で囲まれた文字列をハイライトにするには、このような
コマンドを使います。 >

	:syntax region xInside start=/(/ end=/)/

では、このカッコだけを違った表示にしたい場合はどうすればよいでしょう。もちろ
ん複雑怪奇な範囲コマンドを駆使してもできますが、"matchgroup"というパラメタを
使う方法があります。これは範囲の"start"と"end"部分を違ったグループ(次の例の
場合ならxParenグループ)の指定で表示することができるものです。 >

	:syntax region xInside matchgroup=xParen start=/(/ end=/)/

"matchgroup"パラメタは"start"や"end"で合致する部分をその後ろでの指定に従って
表示します。上の例では"start"部も"end"部もxParenの指定で表示します。"end"の
方をxParenEndで表示するにはこうのようにします。 >

	:syntax region xInside matchgroup=xParen start=/(/
		\ matchgroup=xParenEnd end=/)/

"matchgroup"を使った場合、入れ子になった項目では範囲の"start"と"end"に合致
しなくなるという副作用があります。次の"transparent"の例ではこれを利用してい
ます。


透過(transparent)
-----------------

Ｃのソースファイルでは"while"の後の( )は"for"の後の( )と違った表示にしたいかも
しれません。どちらの場合でも、( )項目自体は同じ方法で定義すべきですので、いず
れにしても入れ子の項目と捕らえることができます。また、呼応する")"があれば、確
実にハイライト表示を停止しなければなりません。以下はこれを実現する一つの方法で
す。 >

	:syntax region cWhile matchgroup=cWhile start=/while\s*(/ end=/)/
		\ contains=cCondNest
	:syntax region cFor matchgroup=cFor start=/for\s*(/ end=/)/
		\ contains=cCondNest
	:syntax region cCondNest start=/(/ end=/)/ contained transparent

これならcWhileとcForには違ったハイライト属性を与えることができます。cCondNest
項目はどちらの定義にも現れますが、cCondNestのハイライト属性については、それを
含んだ項目(cWhile,cFor)のハイライト属性によって上書きされます。"transparent"パ
ラメタがこの動作を実現しているのです。
"matchgroup"パラメタに自分自身を指定している点に注目してください。どうしてこの
ようなことをするのでしょう。それは "matchgroup" によりマッチグループに指定され
た項目は、すでにマッチしたテキストの中からは検索されないという副作用があるから
です。これによりcCondNestグループが、whileやforの後にあるすべての"("にマッチし
てしまうのを避けることができます。コレがない場合、対応する ")" まで全部のテキ
ストが領域として検出されてしまいます。なのでこうすることで、cCondNestはstart項
目のパターンに合致した直後後の部分にだけ、つまり最初の"("の後にだけ合致するの
です。


オフセット
----------

"if"の後にある"("と")"の間の文字列を範囲として定義したいが、"if"や"("、")"自
体を含みたくないとします。これにはパターンにオフセットを使うことで指定できま
す。例をあげましょう。 >

	:syntax region xCond start=/if\s*(/ms=e+1 end=/)/me=s-1

"start"パターンには"ms=e+1"というオフセットを指定しています。"ms"というのは
Match Startの意味で、これは合致の開始位置からのオフセット量を定義しています。
通常はパターンの開始位置です。"e+1"というのは合致したパターンの末尾から、さ
らに１文字進んだ個所を示します。
"end"パターンのオフセットは"me=s-1"です。"me"はMatch Endの意味です。"s-1"は
合致したパターンの開始位置から１文字手前の意味となります。この結果を次の例に
示します。

	if (foo == bar) ~

"foo == bar"の部分だけがxCondとしてハイライト表示となります。

オフセットの詳細については|:syn-pattern-offset|をご覧ください。


単一行指定
----------

"oneline"パラメタはその範囲指定が複数行に跨らないことを示します。例を示しま
しょう。 >

	:syntax region xIfThen start=/if/ end=/then/ oneline

これは"if"で始まって"then"で終わる範囲の定義です。ただし、"if"と同じ行の後に
"then"が現われない場合、上の定義には合致しません。

	Note:
	"oneline"を用いた場合は、同じ行の中に開始パターンと終了パターンを含
	んでいなければ範囲とはみなしません。ですが、"oneline"がない場合は、
	vimは終了パターンがあるかどうかのチェックを行い**ません**。もし終了
	パターンに合致するものがない場合は、ファイルの末尾までその範囲として
	扱います。


CONTINUATION LINES AND AVOIDING THEM
継続行とその回避
----------------

さて、もう少し複雑なことに取り組みます。プリプロセッサの行を定義しましょう。
プリプロセッサの行は１桁目が"#"で、その行の行末までとなります。ただし、行末
がバックスラッシュ(\)で終わっている行は次の行を継続した行とみなします。これ
を処理するには、継続パターンを含むような文法項目を許すことが必要です。 >

	:syntax region xPreProc start=/^#/ end=/$/ contains=xLineContinue
	:syntax match xLineContinue "\\$" contained

この場合、xPreProcは普通は単一行となるのですが、その中に含んでいるグループ
(xLineContinueという名前)によって２行以上続けさせています。
例えば、この定義で次の両方の行に合致します。

	#define SPAM  spam spam spam \ ~
			bacon and spam ~

これは望み通りの動きでしょう。もし違っているのであれば、、内包しているパター
ン(xLineContinue)に"excludenl"を加えることで範囲を単一行に制限することができ
ます。例えば、xPreProcで"end"が行末にある時だけハイライト表示したいとします。
xPreProcがxLineContinueでのように次の行まで続けるのを避けるには、"excludenl"
を使います。 >

	:syntax region xPreProc start=/^#/ end=/$/
		\ contains=xLineContinue,xPreProcEnd
	:syntax match xPreProcEnd excludenl /end$/ contained
	:syntax match xLineContinue "\\$" contained

"excludenl"指定はパターンの前に指定しなければなりません。xLineContinueにはこ
の指定がありませんから、複数行に跨るパターンに合致する場合は最初の例と同じよ
うに次の行まで拡張することとなります。

==============================================================================
*44.8*	クラスタ

文法ファイルを書き始める時に気をつけていただきたい点の１つに、文法グループの
数が大きく膨れあがってしまうというのがあります。vimではいくつもの文法グルー
プを１つにまとめて、「クラスタ」として定義することができます。
forループ、if文、whileループ、関数といった要素を持つ言語があるとします。それ
ぞれが数字や識別子といった同じ文法要素を含むことができます。これを次のように
定義できます。 >

	:syntax match xFor /^for.*/ contains=xNumber,xIdent
	:syntax match xIf /^if.*/ contains=xNumber,xIdent
	:syntax match xWhile /^while.*/ contains=xNumber,xIdent

この場合、同じ内容の"contains=..."行を毎回繰り返さなければなりません。他の項
目を追加したくなった時は、３回それを行わなければなりません。クラスタを使って
複数の文法グループを１つにまとめると、このような定義が簡単になります。
上の３つのグループで使っている２つの項目をクラスタとして定義するには、このよ
うなコマンドを使います。 >

	:syntax cluster xState contains=xNumber,xIdent

クラスタは他のsyntaxの中で普通の文法項目と全く同じように使えますが、先頭に"@"
を付けます。ですから、上で示した３つの行はこのように定義できます。
>
	:syntax match xFor /^for.*/ contains=@xState
	:syntax match xIf /^if.*/ contains=@xState
	:syntax match xWhile /^while.*/ contains=@xState

既存のクラスタに新たなグループ名を追加するには"add="パラメタを使います。 >

	:syntax cluster xState add=xString

逆に"remove="パラメタを使うとリストからその文法グループを取り除きます。 >

	:syntax cluster xState remove=xNumber

==============================================================================
*44.9*	他の文法定義ファイルを取り込む

C++言語の文法はＣ言語を包含しています。ですから、２つの文法定義をする必要は
ありません。C++の文法ファイルの中で次のコマンドを使って、Ｃ言語の文法ファイ
ルを読み込むようにすることができます。 >

	:runtime! syntax/c.vim

":runtime!"コマンドは'runtimepath'の中から全ての"syntax/c.vim"ファイルを探し
ます。これを使えばＣ言語用のファイルと同様にＣの言語定義を行えます。"c.vim"
を入れ換えた場合や他のファイルに項目を追加した場合でも、問題なく定義を読み込
んでくれます。
Ｃの文法項目を読み込んだ後で、C++専用の項目を定義できます。例えば、Ｃで
は使わないようなキーワードを追加できます。 >

	:syntax keyword cppStatement	new delete this friend using

これは他の文法ファイルでも同じように動きます。

ではPerl言語の場合を考えてみましょう。Perlは独特の２パート構成になっていま
す。１つはPOD形式のドキュメントセクションで、もう１つはPerl自身で記述したプ
ログラムです。PODセクションは"=head"で始まり、"=cut"で終ります。
PODの文法を１つの文法ファイルで行って、それをPerl自身の文法ファイルの中で使
うようにできます。":syntax include"コマンドは文法ファイルを読み込み、文法ク
ラスタの中に定義内容を格納します。Perl用の場合は次のような命令となります。 >

	:syntax include @Pod <sfile>:p:h/pod.vim
	:syntax region perlPOD start=/^=head/ end=/^=cut/ contains=@Pod

"=head"がPerlソースの中に現れた場合、perlPODの範囲が開始されます。この範囲で
は@Podクラスタを包含しています。pod.vimファイルの第１レベルで定義してある全
ての項目がその対象となります。"=cut"が現れると、perlPODの範囲は終了となり、
Perlファイルで定義された項目に戻ります。
":syntax include"では読み込もうとしているファイルの中":syntax clear"があって
もちゃんと無視してくれます。また"contains=ALL"のようなパラメタはそのファイル
の中で定義している項目だけを対象とし、呼び出し元での項目は対象外となります。
"<sfile>:p:h/"の部分は現在のファイル名(<sfile>)をフルパスに拡張(:p)し、その
ヘッダ部分(:h)を取り出します。展開結果はカレントファイルのディレクトリ名とな
ります。つまり、ここでは同じディレクトリにある"pod.vim"ファイルを示している
ことになるわけです。

==============================================================================
*44.10* 表示のシンクロナイズ

訳注: 以下、原文だけではわかりにくい概念のため、追補しました。

驚かれるかも知れませんが、vimではファイルの同じ個所を表示した時に常にそのハ
イライトが同じように表示されるとは限りません。(これをシンクロナイズと呼びま
す) 例えば次の例を考えてみましょう。

	+------------------- ~
	|/* ~
	| * これはコメント ~
	| */ ~
	| ~

このようにウィンドウの１行目からにコメントがあれば、当然ながら全てが正しく出
力されます。しかし、次のような場合はどうでしょうか。

	+------------------- ~
	| * これはコメント ~
	| */ ~
	| ~

これだけを見ると、コメントの開始となる"/*"がないので、コメントとは識別できな
いはずですが、Vimはこれを正しく表示します。しかしコメントがあまりに長い場合
は正しく表示されなくなります。一体何が起っているのでしょうか？

訳注: 追補終り

コンパイラにとっては簡単なことです。なぜならコンパイラはファイルの先頭から順番
にだけ解釈しているだけで良いからです。Vimにとってはそう簡単ではありません。上
記のように、その解釈がファイルの途中、今編集がなされている真っ最中の場所から始
まるかも知れないからです。その場合Vimの解析機能が、今見ている場所にどのような
意味があるか、どうやって知ったらよいのでしょう。
その秘密は":syntax sync"コマンドにあります。これはvimにどのようにしてその項目
の開始場所を調べるかを示します。例えば、次のコマンドはvimにＣ形式のコメントの
最初か最後を逆方向検索し、その場所からハイライト表示を始めるという指示です。
>
	:syntax sync ccomment

パラメタを使ってこの処理をチューニングすることができます。"minlines"パラメタ
では逆方向に検索をする最小行数を指定できます。"maxlines"では検索する最大行数
を指定できます。
例えば、次のコマンドは画面の最上段から少なくとも10行前までを検索する指示とな
ります。 >

	:syntax sync ccomment minlines=10 maxlines=500

この範囲で現在の状態を判断できなければ、さらにそれが解るまで逆昇ります。ただ
し、500行以上は探しません。("maxlines"を大きくすればそれだけ処理が遅くなりま
す。逆に小さすぎるとシンクロナイズに失敗することになります)
シンクロナイズを高速に行わせるには、どの文法項目が省略できるかをVimに教えてや
る必要があります。そのためには本当に表示が必要な照合や範囲にだけ"display"パラ
メタを付与します。
デフォルトでは、探すべきコメントは"Comment"文法グループの一部として色付けされ
ています。他の方法で色を付けたい場合には、違った文法グループを指定することもで
きます。 >

	:syntax sync ccomment xAltComment

お使いのプログラム言語がＣ言語形式のコメントをサポートしていない場合、他の同
期方法を試すことができます。一番簡単なのはvimに逆方向に調べさせたい行数を指
定することです。次のコマンドでは150行戻ってから解析を始めます。 >

	:syntax sync minlines=150

"minlines"を大きな値にすれば、vimの動作が遅くなるかもしれません。特にファイル
の始めの方にスクロールしている時に顕著でしょう。
最後に、検索のために文法グループを定義することが、このコマンドを使ってできま
す: >

	:syntax sync match {sync-group-name}
		\ grouphere {group-name} {pattern}

これは、{group-name}という文法グループは与えられた{pattern}の後に始まるという
ことを、Vimに指示します。
{sync-group-name}はこの同期指定に名前を付けるのに用います。例えば、シェルの
スクリプト言語ではif文は、次の例のように"if"で始まり"fi"で終ります。

	if [ --f file.txt ] ; then ~
		echo "File exists" ~
	fi ~

この文法を"grouphere"指令を使って定義するには、このようにします。 >

	:syntax sync match shIfSync grouphere shIf "\<if\>"

"grouphere"パラメタはそのパターンがグループの終了であることを示します。例え
ば、if/fiグループの終了は次の通りです。 >

	:syntax sync match shIfSync groupthere NONE "\<fi\>"

この例では"NONE"がどんな文法範囲にも入っていないことを示します。特に、ifブ
ロックの中でないことを示します。

"grouphere"や"groupthere"パラメタなしでも照合や範囲を定義できます。こういっ
たグループは同期処理の途中では無視されます。例えば、次の例では{ }の中の全て
を無視します。仮に他の同期メソッドに合致していても無視されます。 >

	:syntax sync match xSpecial /{.*}/

同期についての詳細はリファレンスマニュアルの|:syn-sync|をご覧ください。

==============================================================================
*44.11*	文法ファイルをインストールする

新しい文法ファイルが使えるようになったら、それを'runtimepath'の"syntax"ディ
レクトリに入れておきます。Unixなら"~/.vim/syntax"です。
文法ファイルの名前はファイルタイプに".vim"を加えた名前でなければなりません。
つまり"x"言語の場合なら、このファイルのフルパスはこうなります。

	~/.vim/syntax/x.vim ~

また、そのファイルタイプを認識できるようにしなければなりません。|43.2|をご覧
ください。

作ったファイルがうまく動いた場合は、それを他のvimユーザにも使ってもらえるよ
うにしたいかもしれませんね。それには、まず次節を読んで他の人の環境でも正しく
動くことをよく確認します。次にvimのメインテナンス担当<maintainer@vim.org>に
電子メールを送ります。そのファイルタイプを検出する方法を説明してください。
ちょっと運が良ければそのファイルはvimの次バージョンに組み込まれるでしょう。


既存の文法ファイルへの追加
--------------------------

上の説明は完全に新たな文法ファイルを追加する場合の方法です。既存の文法ファイ
ルがあっても、対応に洩れがある場合には別のファイルでそれを補なうことができま
す。配布版の文法ファイルを直接変更すると、vimの新バージョンをインストールした
時に上書きされる心配がなくなります。
文法コマンドを独自のファイルに書いておき、出来れば既存の文法ファイルのグルー
プ名を使うようにします。例えば、Ｃの文法ファイルに新たな変数タイプを追加する
場合にはこうします。
>
	:syntax keyword cType off_t uint

元の文法ファイルと同じ名前でファイルを保存します。この場合なら"c.vim"となり
ます。このファイルを'runtimepath'の最後の方に書いてあるディレクトリの中に置
きます。こうすれば元の文法ファイルよりも後に読み込ませることができます。Unix
ではこうなります。

	~/.vim/after/syntax/c.vim ~

==============================================================================
*44.12*	可搬性の高い文法の配置

全てのvimユーザが文法ファイルを交換するというのは良いことですよね？これを実
現するために、文法ファイルを作る時は以下のガイドラインを守らなくてはなりませ
ん。

ヘッダ部には何用の文法ファイルなのか、メインテナンス担当が誰か、最後に更新し
た日はいつか？を明記する必要があります。変更履歴にはあまりたくさんの情報を入
れないようにしないと、誰も読んでくれなくなります。例えばこうします。 >

	" Vim syntax file
	" Language:	C
	" Maintainer:	Bram Moolenaar <Bram@vim.org>
	" Last Change:	2001 Jun 18
	" Remark:	Included by the C++ syntax.

他の文法ファイルと同じレイアウトにしてください。既存の文法ファイルをサンプル
として使えば時間がずいぶん節約できます。

文法ファイルには内容のわかりやすい名前を選んでください。小文字と数字だけを
使ってください。たくさんの個所で使いますので、文法ファイルの名前("name.vim"
や'filetype'、b:current_syntax)にはあまり長い名前を付けないようにします。
(例えば、nameType, nameStatement, nameStringなど)
"b:current_syntax"というのはバッファローカルな変数のことです。

最初に"b:current_syntax"を確認します。これが定義済であれば、'runtimepath'の
最初の方でシンタックスファイルをロード済です: >

	if exists("b:current_syntax")
	  finish
	endif

vim5.8との互換が必要なら次のようにします: >

	if version < 600
	  syntax clear
	elseif exists("b:current_syntax")
	  finish
	endif

処理の最後に"b:current_syntax"に文法名を設定します。インクルードファイルでも
同じように処理するのを忘れないようにします。２つのファイルをインクルードする
場合に"b:current_syntax"をリセットしなければならないかもしれません。

作った文法ファイルをvim5.xでも動くようにしたければ、"v:version"もちぇっくす
るようにしてください。実例は"yacc.vim"にあります。ご覧ください。

利用者が設定するような項目は含んではいけません。'tabstop'や'expandtab'を設定
してはいけません。こういったことはファイルタイププラグインの領分です。

また、マップや短縮形も含んではいけません。ただし'iskeyword'だけは、キーワー
ドの識別にどうしても必要であれば、設定してもかまいません。

利用者が好きな色を選択できるようにするために、ハイライトする要素の全ての種類に
対して異なるグループ名を与えてください。そしてそれらを標準のハイライトグループ
のどれかにリンクしてください。そうすればどのカラースキームでも動作するようにな
ります。あなたが特定の色を選んでしまうと、カラースキームによっては見え方が悪く
なってしまいます。また、利用者の環境によって背景色が違っていたり、色数が８色し
か使えない場合もあるということを忘れないでください。

リンクするには"hi def link"を使います。すると利用者はあなたの文法ファイルが読
み込まれる前に異なるハイライトを選ぶことができます。例: >

	  hi def link nameString	String
	  hi def link nameNumber	Number
	  hi def link nameCommand	Statement
	  ... etc ...

同期を取る時には使わない項目には"display"パラメタを与えることで、逆スクロー
ル時やCTRL-Lを実行した時のスピードアップを図ることができます。

==============================================================================

Next chapter: |usr_45.txt|  言語を選ぶ

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
