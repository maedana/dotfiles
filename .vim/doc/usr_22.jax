*usr_22.txt*	For Vim バージョン 7.0.  Last change: 2006 Apr 24

		     VIM USER MANUAL - by Bram Moolenaar

				ファイルを探す


ファイルはどこにでもありますが、どうやって目的のファイルを見つければいいので
しょうか。Vim ではさまざまな方法でディレクトリツリーをブラウズできます。ファイ
ルにジャンプするコマンドもあります。開いたことのあるファイルは後から参照できま
す。

|22.1|	ファイルエクスプローラ
|22.2|	カレントディレクトリ
|22.3|	ファイルを探す
|22.4|	バッファリスト

次章: |usr_23.txt|  特殊なファイルを編集する
前章: |usr_21.txt|  中断と再開
目次: |usr_toc.txt|

==============================================================================
*22.1*	ファイルエクスプローラ

ディレクトリを編集するためのプラグインがあります。試してみましょう: >

	:edit .

自動コマンドと Vim スクリプトの魔法により、ディレクトリの内容がウィンドウに表
示されます。例えばこんな具合です:

	" Press ? for keyboard shortcuts ~
	" Sorted by name (.bak,~,.o,.h,.info,.swp,.obj,.orig,.rej at end of list) ~
	"= /home/mool/vim/vim6/runtime/doc/ ~
	../ ~
	check/ ~
	Makefile ~
	autocmd.txt ~
	change.txt ~
	eval.txt~ ~
	filetype.txt~ ~
	help.txt.info ~

次の項目が表示されます:
1.  ヘルプの表示方法。? を押すとファイルエクスプローラのヘルプが表示されます。
2.  二行目は、ファイル一覧の表示方法の説明。ソート方法は変更できます。
3.  三行目は、カレントディレクトリの名前。
4.  "../" ディレクトリ。親ディレクトリです。
5.  ディレクトリ一覧。
6.  ファイル一覧。二行目の "at the end of the list" に指定されているファイルは
    ここに表示されません。
7.  優先順位の低いファイル一覧。使用頻度が低いと思われるファイルはここ (末尾)
    に表示されます。

構文強調表示が有効な場合は各項目が別々の色で表示され、視認性が上がります。

一覧の中はノーマルモードコマンドで移動できます。ファイル名の上にカーソルを動か
して <Enter> を押すとファイルが開きます。もう一度 ":edit ." と入力すればエクス
プローラに戻れます。CTRL-O で戻ることもできます。
ディレクトリ名の上にカーソルを動かして <Enter> を押すと、エクスプローラがその
ディレクトリに移動し、新たなファイル一覧が表示されます。"../" ディレクトリの上
で <Enter> を押すと上の階層に移動できます。あるいは、"../" までカーソルを移動
しなくても、"-" を押すだけで上の階層に移動できます。

"?" を押すとエクスプローラで使えるコマンドの簡単なヘルプが表示されます:

	" <enter> : open file or directory ~
	" o : open new window for file/directory ~
	" O : open file in previously visited window ~
	" p : preview the file ~
	" i : toggle size/date listing ~
	" s : select sort field    r : reverse sort ~
	" - : go up one level      c : cd to this dir ~
	" R : rename file	   D : delete file ~
	" :help file-explorer for detailed help ~

最初の四つはファイルを開くコマンドです。使うコマンドによってファイルの開き方が
違います:

	<Enter>		カレントウィンドウで開く。
	o		新しいウィンドウで開く。
	O		直前に使っていたウィンドウで開く。
	p		プレビューウィンドウで開く。カーソルはエクスプローラ
			ウィンドウに戻ります。|preview-window|

次のコマンドは表示を変更するために使います:

	i		ファイルのサイズと日付を表示する。もう一度 i を押すと
			非表示になる。
	s		カーソルのあるフィールドを使ってファイルを並べ替える。
			例えば、i コマンドでサイズと日付を表示し、ファイルサイ
			ズが表示されている場所に移動して s を押すと、ファイル
			一覧がサイズ順にソートされます。日付の場所で s を押せ
			ば日付順にソートされます
	r		逆順に並べ替える (サイズと日付、両方可)

次のようなコマンドもあります:

	c		表示されているディレクトリをカレントディレクトリにす
			る。":edit" コマンドを使うときに、ファイル名の指定が簡
			単になります。
	R		ファイルの名前を変更する。プロンプトが表示されるので、
			新しい名前を入力してください。
	D		ファイルを削除する。プロンプトが表示されるので、確認し
			てから実行してください。

==============================================================================
*22.2*	カレントディレクトリ

シェルと同じように Vim にもカレントディレクトリという概念があります。例えば、
ホームディレクトリにいるときに "VeryLongFileName" ディレクトリにあるファイルを
開きたい場合、そのまま実行することもできますが: >

	:edit VeryLongFileName/file1.txt
	:edit VeryLongFileName/file2.txt
	:edit VeryLongFileName/file3.txt

次のようにすれば、入力が簡単です: >

	:cd VeryLongFileName
	:edit file1.txt
	:edit file2.txt
	:edit file3.txt

":cd" コマンドでカレントディレクトリを変更できます。現在のカレントディレクトリ
を確認するには ":pwd" コマンドを使います: >

	:pwd
	/home/Bram/VeryLongFileName

直前のカレントディレクトリは記録されているので ":cd -" で元の場所に戻れます。
例: >

	:pwd
	/home/Bram/VeryLongFileName
	:cd /etc
	:pwd
	/etc
	:cd -
	:pwd
	/home/Bram/VeryLongFileName
	:cd -
	:pwd
	/etc


ウィンドウローカルディレクトリ
------------------------------

ウィンドウを分割した直後、二つのウィンドウは同じカレントディレクトリを使ってい
ます。カレントディレクトリはウィンドウ毎に設定できるので、新しいウィンドウだけ
カレントディレクトリを変更して別の場所で作業できます。これを、ローカルディレク
トリといいます。 >

	:pwd
	/home/Bram/VeryLongFileName
	:split
	:lcd /etc
	:pwd
	/etc
	CTRL-W w
	:pwd
	/home/Bram/VeryLongFileName

":lcd" コマンドを使うまでは、すべてのウィンドウが共通のカレントディレクトリを
使っています。一つのウィンドウで ":cd" コマンドを実行すると、他のウィンドウの
カレントディレクトリも変更されます。
":lcd" を使ってカレントディレクトリを変更したウィンドウは、固有のカレントディ
レクトリを持ちます。固有のカレントディレクトリは、他のウィンドウで ":cd" また
は ":lcd" を使っても変更されません。
固有のカレントディレクトリを持っているウィンドウで ":cd" コマンドを使うと、再
び共通のカレントディレクトリを使うようになります。

==============================================================================
*22.3*	ファイルを探す

C 言語のファイルを編集していて、次のような行があったとします:

	#include "inits.h" ~

"inits.h" を開いて内容を確認したい場合は、カーソルをファイル名の上に動かして、
次のように入力します: >

	gf

ファイルが検索され、開かれます。
ファイルがカレントディレクトリにない場合は 'path' オプションが使われます。この
オプションはディレクトリ名のリストです。指定されたディレクトリからファイルが検
索されます。
例えば、"c:/prog/include" にインクルードファイルがある場合は次のコマンドでディ
レクトリを追加できます: >

	:set path+=c:/prog/include

ディレクトリを絶対パスで指定した場合は、どこで作業していても同じディレクトリが
参照されます。開いているファイル以下のサブディレクトリにインクルードファイルが
ある場合は相対パスを指定してください。相対パスの先頭はドットです: >

	:set path+=./proto

この場合、ファイルが保存されているディレクトリの "proto" ディレクトリからファ
イルが検索されます。つまり、"inits.h" の上で "gf" を使うと、同じディレクトリの
"inits.h" が検索された後に、"proto/inits.h" が検索されます。
"./" を付けなかった場合、つまり "proto" と指定した場合は、カレントディレクトリ
の "proto" ディレクトリが検索されます。ファイルのディレクトリとカレントディレ
クトリは意味が異なるので注意してください。

ディレクトリの指定方法は他にもあります。'path' オプションのヘルプを参照してく
ださい。
'isfname' オプションには、ファイル名として使える文字、あるいは使えない文字を設
定できます (例えば上の例では " 文字がファイル名に含まれてませんね)。

ファイルの名前がわかっている場合は、その名前がファイル内で使われていなくても、
検索することができます: >

	:find inits.h

'path' オプションを使ってファイルが検索されます。'path' が使われる以外は
":edit" コマンドと同じです。

検索したファイルを新しいウィンドウで開くには、"gf" ":find" ではなく "CTRL-W f"
":sfind" を使います。


Vim を起動して 'path' の中からファイルを開くには、次の方法が便利です: >

	vim "+find stdio.h"

'path' 内の "stdio.h" が検索されます。引数はクオート (") で囲む必要があります
|-+c|。

==============================================================================
*22.4*	バッファリスト

Vim では編集中のファイルのことをバッファといいます。バッファはファイルのコピー
です。編集を終えて保存したときに、バッファの内容がファイルに書き込まれます。
バッファにはファイルのテキストの他に、マークやオプション設定などのファイルに関
連した情報も記録されます。


隠れバッファ (HIDDEN BUFFERS)
------------

例えば、one.txt を編集しているときに two.txt を編集したくなったとします。
one.txt は変更されているので ":edit two.txt" は使えません。しかも、あなたはま
だ one.txt を保存したくはありません。次のコマンドで解決できます: >

	:hide edit two.txt

"one.txt" というバッファは画面から消えます。しかしバッファの内容が失われるわけ
ではありません。未保存のテキストはまだ残っています。このようなバッファを隠れ
バッファといいます。
":hide" コマンドの引数はコマンドです。指定されたコマンドは、'hidden' オプショ
ンがオンに設定されているかのように振る舞います。もちろん、自分で 'hidden' オプ
ションを設定しても構いません。バッファが破棄されたとき、'hidden' がオンなら、
そのバッファは隠れバッファになります。
隠れバッファを使ったときは、すべてのバッファが保存されたのを確認してから Vim
を終了してください。


休眠バッファ (INACTIVE BUFFERS)
------------

バッファを閉じてもいくつかの情報は失われずに残ります。バッファリストに入ってい
るバッファの内、画面に表示されず、隠れバッファでもないバッファのことを休眠バッ
ファといいます:

   アクティブバッファ	ウィンドウに表示されている。テキストはメモリの中。
   隠れバッファ		表示されていない。テキストはメモリの中。
   休眠バッファ		表示されていない。テキストは保持されていない。

休眠バッファにはファイル名やマークなどの情報が保存されています。ファイル名が保
存されているので、編集したことのあるファイルを確認し、それを再び開くことができ
ます。


バッファリストの表示
--------------------

次のコマンドでバッファリストを表示できます: >

	:buffers

次のコマンドも同じです。コマンドの名前と機能が連想しずらいかもしれませんが、入
力は簡単です: >

	:ls

コマンドの出力例:

  1 #h	"help.txt"			line 62 ~
  2 %a+	"usr_21.txt"			line 1 ~
  3	"usr_toc.txt"			line 1 ~

行頭の数字はバッファ番号です。バッファを開くときに名前の代わりにバッファ番号を
指定することもできます。下記参照。
バッファ番号に続いてフラグ、ファイル名、最後にカーソルが位置していた行番号、が
表示されます。
フラグ部分には以下の文字が (左から右へ) 表示されます。

	u	非列挙バッファ (|unlisted-buffer|)。
	 %	カレントバッファ。
	 #	オルタネートバッファ。
	  a	テキストを持っている。表示されている。
	  h	テキストを持っている。隠れバッファ。
	   =	読み込み専用。
	   -	変更不可 ('modifiable' オプションがオフ)。
	    +	変更あり。


バッファを開く
--------------

バッファ番号を指定してバッファを開くことができます。ファイル名を入力する必要は
ありません: >

	:buffer 2

しかし、バッファ番号を知るためにはバッファリストを表示しなければなりません。名
前の一部分だけを指定して開くこともできます: >

	:buffer help

指定された名前に近いバッファが検索され、名前が一致したバッファが一つだけなら、
そのバッファが使われます。この例なら "help.txt" など。
バッファを新しいウィンドウで開くには、次のコマンドを使います: >

	:sbuffer 3

もちろん名前も指定できます。


バッファリストを使う
--------------------

次のコマンドでバッファリストの中を移動できます:

	:bnext		次のバッファを開く
	:bprevious	前のバッファを開く
	:bfirst		最初のバッファを開く
	:blast		最後のバッファを開く

次のコマンドでバッファリストからバッファを削除できます: >

	:bdelete 3

もちろん名前も指定できます。
アクティブバッファ (ウィンドウに表示されているバッファ) を削除すると、表示して
いたウィンドウも閉じます。カレントバッファを削除するば、カレントウィンドウが閉
じます。ウィンドウが一つしかなかった場合は、他のバッファに切り替わります。なに
もないを開くことはできません!

	Note:
	":bdelete" でバッファを削除してもバッファの情報は失われません。バッファ
	が "unlisted" 状態になり、":buffers" コマンドで表示されなくなるだけで
	す。":buffers!" コマンドを使えば unlisted バッファも表示されます (そ
	う、Vim は不可能を可能にするのです)。バッファの情報を完全に消去するに
	は ":bwipe" を使ってください。'buflisted' オプション参照。

==============================================================================

次章: |usr_23.txt|  特殊なファイルを編集する

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
