ruby << RUBY
module AutoEnd
  module Handler; end

  class Manager
    def initialize
      @handlers = {}

      AutoEnd::Handler.constants.map {|const|
        AutoEnd::Handler.const_get(const)
      }.each do |klass|
        handler = klass.new

        klass.filetypes.each do |type|
          @handlers[type] = handler
        end
      end
    end

    def exec
      handler = @handlers[VIM.evaluate('&filetype')] and handler.handle
    end
  end

  module Helper
    module_function

    def append_line(str, row = $curbuf.line_number)
      return if str.nil? || str.empty?
      $curbuf.append(row, str)
    end

    def indent(line = $curbuf.line)
      /^\s*/.match(line).to_a.first
    end

    def eol?
      $curwin.cursor.last.succ == $curbuf.line.size
    end
  end
end

class AutoEnd::Handler::Ruby
  include AutoEnd::Helper

  def self.filetypes
    %w(ruby)
  end

  def initialize
    @exps = [
      /^\s*#/,
      /^(=begin)\b/,
      /^\s*(class|module|def)\b(?!.*;)/,
      /([(\[]|\bbegin)\s*$/,
      /(\bdo|\{)(?:\s*\|.*\|)?\s*$/,
      /<<-?["'`]?(\w+)["'`]?/
    ]

    @assoc = Hash.new {|h, k| k }.merge(
      'class'  => 'end',
      'module' => 'end',
      'def'    => 'end',
      'begin'  => 'end',
      'do'     => 'end',
      '('      => ')',
      '{'      => '}',
      '['      => ']',
      '=begin' => '=end'
    )
  end

  def handle(line = $curbuf.line)
    return unless eol? && @exps.find {|e| e =~ line }
    append_line(indent + @assoc[$1]) if $1
  end
end

autoend_manager = AutoEnd::Manager.new
RUBY

inoremap <silent> <CR> <ESC>:ruby autoend_manager.exec<CR>a<CR>

